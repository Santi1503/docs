{
        "Inicializar proyecto": [
            "Node.js es un entorno de ejecución para JavaScript en el servidor. Para inicializar un proyecto:",
            "```bash",
            "# Crear directorio del proyecto",
            "mkdir my-node-project",
            "cd my-node-project",
            "",
            "# Inicializar package.json con valores por defecto",
            "npm init -y",
            "",
            "# O para configuración interactiva",
            "npm init",
            "",
            "# Si usas TypeScript",
            "npm init -y",
            "npm install typescript @types/node ts-node --save-dev",
            "npx tsc --init  # Crea tsconfig.json",
            "```",
            "",
            "Para proyectos con Express (framework web más popular):",
            "```bash",
            "npm install express",
            "npm install nodemon --save-dev  # Para reinicio automático en desarrollo",
            "",
            "# Si usas TypeScript con Express",
            "npm install express",
            "npm install typescript @types/node @types/express ts-node nodemon --save-dev",
            "```"
        ],
        
        "Instalar librerías": [
            "Librerías comunes para proyectos Node.js:",
            "```bash",
            "# Framework web",
            "npm install express fastify hapi koa",
            "",
            "# ORM y bases de datos",
            "npm install sequelize    # SQL ORM",
            "npm install mongoose     # MongoDB ODM",
            "npm install prisma       # ORM moderno",
            "npm install knex         # Query builder SQL",
            "",
            "# Autenticación",
            "npm install passport jsonwebtoken bcrypt",
            "",
            "# Validación",
            "npm install joi zod express-validator",
            "",
            "# Utilidades",
            "npm install dotenv       # Variables de entorno",
            "npm install winston      # Logging",
            "npm install cors         # CORS middleware",
            "npm install helmet       # Seguridad",
            "npm install morgan       # HTTP request logger",
            "npm install multer       # Manejo de archivos",
            "",
            "# Testing",
            "npm install jest supertest --save-dev",
            "",
            "# Tipos (para TypeScript)",
            "npm install @types/express @types/node --save-dev",
            "```"
        ],
        
        "Estructura básica": [
            "Estructura recomendada para una API REST con Node.js/Express:",
            "```",
            "├── src/",
            "│   ├── config/         # Configuración de la aplicación",
            "│   │   ├── database.js",
            "│   │   └── env.js",
            "│   ├── controllers/    # Controladores (lógica de negocio)",
            "│   │   └── userController.js",
            "│   ├── middlewares/    # Middlewares personalizados",
            "│   │   ├── auth.js",
            "│   │   └── errorHandler.js",
            "│   ├── models/         # Modelos de datos",
            "│   │   └── User.js",
            "│   ├── routes/         # Definiciones de rutas",
            "│   │   ├── index.js    # Router principal",
            "│   │   └── userRoutes.js",
            "│   ├── services/       # Servicios (lógica de negocio compleja)",
            "│   │   └── userService.js",
            "│   ├── utils/          # Utilidades",
            "│   │   └── helpers.js",
            "│   └── app.js          # Configuración de la aplicación",
            "├── .env                # Variables de entorno (no en control de versiones)",
            "├── .env.example        # Ejemplo de variables de entorno",
            "├── package.json",
            "└── server.js          # Punto de entrada",
            "```",
            "",
            "Ejemplo básico de servidor Express:",
            "```javascript",
            "// app.js",
            "const express = require('express');",
            "const cors = require('cors');",
            "const helmet = require('helmet');",
            "const morgan = require('morgan');",
            "",
            "const app = express();",
            "",
            "// Middlewares",
            "app.use(helmet());          // Seguridad básica",
            "app.use(cors());            // Habilita CORS",
            "app.use(morgan('dev'));     // Logging de solicitudes",
            "app.use(express.json());    // Parseo JSON",
            "app.use(express.urlencoded({ extended: true })); // Parseo de formularios",
            "",
            "// Rutas",
            "const userRoutes = require('./routes/userRoutes');",
            "app.use('/api/users', userRoutes);",
            "",
            "// Middleware de manejo de errores",
            "app.use((err, req, res, next) => {",
            "  console.error(err.stack);",
            "  res.status(500).json({ message: 'Something went wrong!', error: err.message });",
            "});",
            "",
            "module.exports = app;",
            "",
            "// server.js",
            "const app = require('./app');",
            "const PORT = process.env.PORT || 3000;",
            "",
            "app.listen(PORT, () => {",
            "  console.log(`Server running on port ${PORT}`);",
            "});",
            "```",
            "",
            "Ejemplo de rutas:",
            "```javascript",
            "// routes/userRoutes.js",
            "const express = require('express');",
            "const router = express.Router();",
            "const userController = require('../controllers/userController');",
            "const authMiddleware = require('../middlewares/auth');",
            "",
            "router.post('/register', userController.register);",
            "router.post('/login', userController.login);",
            "router.get('/profile', authMiddleware, userController.getProfile);",
            "",
            "module.exports = router;",
            "```",
            "",
            "Ejemplo de controlador:",
            "```javascript",
            "// controllers/userController.js",
            "const User = require('../models/User');",
            "",
            "exports.register = async (req, res, next) => {",
            "  try {",
            "    const { username, email, password } = req.body;",
            "    const user = await User.create({ username, email, password });",
            "    res.status(201).json({ success: true, data: user });",
            "  } catch (error) {",
            "    next(error);",
            "  }",
            "};",
            "",
            "exports.login = async (req, res, next) => {",
            "  try {",
            "    // Lógica de login",
            "  } catch (error) {",
            "    next(error);",
            "  }",
            "};",
            "```"
        ],
        
        "Comandos útiles": [
            "Comandos comunes para Node.js:",
            "```bash",
            "# Ejecución básica",
            "node server.js           # Ejecuta el script",
            "nodemon server.js        # Ejecuta con reinicio automático",
            "",
            "# Scripts de package.json",
            "npm start                # Ejecuta script 'start'",
            "npm run dev              # Ejecuta script 'dev' (típicamente con nodemon)",
            "npm test                 # Ejecuta pruebas",
            "",
            "# Gestión de dependencias",
            "npm list                 # Lista dependencias instaladas",
            "npm outdated             # Muestra dependencias desactualizadas",
            "npm update               # Actualiza dependencias",
            "npm audit                # Audita vulnerabilidades",
            "npm audit fix            # Intenta arreglar vulnerabilidades",
            "",
            "# Entorno (con módulo dotenv)",
            "NODE_ENV=production node server.js  # Establece variable de entorno",
            "",
            "# TypeScript",
            "tsc                      # Compila TypeScript a JavaScript",
            "ts-node server.ts        # Ejecuta directamente TypeScript",
            "nodemon --exec ts-node server.ts  # Reinicio con TypeScript",
            "",
            "# Depuración",
            "node --inspect server.js           # Habilita depurador",
            "node --inspect-brk server.js       # Pausa en primera línea",
            "```"
        ],
        
        "Tips & extras": [
            "## Prácticas recomendadas para Node.js",
            "- Asincronía: Usa async/await para código más legible y mantenible:",
            "```javascript",
            "async function getData() {",
            "  try {",
            "    const result = await db.query('SELECT * FROM users');",
            "    return result;",
            "  } catch (error) {",
            "    console.error('Database error:', error);",
            "    throw error;",
            "  }",
            "}",
            "```",
            "- Gestión de errores: Implementa middleware para manejo centralizado de errores:",
            "```javascript",
            "// errorHandler.js",
            "module.exports = (err, req, res, next) => {",
            "  // Log error",
            "  console.error(err);",
            "",
            "  // Determinar tipo de error",
            "  if (err.name === 'ValidationError') {",
            "    return res.status(400).json({ message: err.message });",
            "  }",
            "",
            "  if (err.name === 'UnauthorizedError') {",
            "    return res.status(401).json({ message: 'Invalid token' });",
            "  }",
            "",
            "  // Error de servidor por defecto",
            "  return res.status(500).json({ message: 'Internal server error' });",
            "};",
            "```",
            "- Seguridad: Usa helmet para protección básica:",
            "```javascript",
            "const helmet = require('helmet');",
            "app.use(helmet());",
            "```",
            "- Logging: Implementa un logger estructurado:",
            "```javascript",
            "const winston = require('winston');",
            "const logger = winston.createLogger({",
            "  level: 'info',",
            "  format: winston.format.json(),",
            "  transports: [",
            "    new winston.transports.File({ filename: 'error.log', level: 'error' }),",
            "    new winston.transports.File({ filename: 'combined.log' })",
            "  ]",
            "});",
            "",
            "if (process.env.NODE_ENV !== 'production') {",
            "  logger.add(new winston.transports.Console({",
            "    format: winston.format.simple()",
            "  }));",
            "}",
            "```",
            "- Clusters: Aprovecha todos los núcleos de CPU:",
            "```javascript",
            "const cluster = require('cluster');",
            "const os = require('os');",
            "",
            "if (cluster.isMaster) {",
            "  const numCPUs = os.cpus().length;",
            "  for (let i = 0; i < numCPUs; i++) {",
            "    cluster.fork();",
            "  }",
            "  cluster.on('exit', (worker, code, signal) => {",
            "    console.log(`Worker ${worker.process.pid} died`);",
            "  });",
            "} else {",
            "  require('./server.js');",
            "}",
            "```"
        ]
}