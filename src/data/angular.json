{
      "Inicializar proyecto": [
        "ðŸš€ Instalar Angular CLI y crear un proyecto:",
        "1. Instalar Angular CLI:",
        "   - Si no tienes Angular CLI instalado, ejecuta el siguiente comando:",
        "   ```bash\n   npm install -g @angular/cli\n   ```",
        "2. Crear un nuevo proyecto Angular:",
        "   - Ejecuta este comando para crear un proyecto Angular:",
        "   ```bash\n   ng new my-angular-app\n   ```",
        "   - Si quieres evitar preguntas interactivas y definir configuraciones especÃ­ficas, usa:",
        "   ```bash\n   ng new my-angular-app --routing --style=scss --skip-tests\n   ```",
        "3. Iniciar el servidor de desarrollo:",
        "   - Accede al directorio y ejecuta el servidor:",
        "   ```bash\n   cd my-angular-app\n   ng serve\n   ```",
        "4. Abrir la aplicaciÃ³n en el navegador:",
        "   - Por defecto, la aplicaciÃ³n se abrirÃ¡ en `http://localhost:4200/`."
      ],
      "Instalar librerÃ­as": [
        "ðŸ“¦ LibrerÃ­as comunes para proyectos Angular:",
        "1. Angular Material (UI components):",
        "   ```bash\n   ng add @angular/material\n   ```",
        "2. State Management con NgRx:",
        "   ```bash\n   ng add @ngrx/store\n   ng add @ngrx/effects\n   ng add @ngrx/entity\n   ng add @ngrx/store-devtools\n   ```",
        "3. Forms avanzados:",
        "   ```bash\n   npm install @ngneat/reactive-forms\n   ```",
        "4. HTTP y APIs:",
        "   ```bash\n   npm install @ngneat/cashew\n   ```",
        "5. Animaciones (GSAP):",
        "   ```bash\n   npm install gsap\n   ```"
      ],
      "Estructura bÃ¡sica": [
        "ðŸ—‚ Estructura de un proyecto Angular:",
        "1. Estructura de carpetas:",
        "   ```",
        "   src/",
        "   â”œâ”€â”€ app/",
        "   â”‚   â”œâ”€â”€ core/              # Servicios globales, interceptores",
        "   â”‚   â”œâ”€â”€ shared/            # Componentes y pipes comunes",
        "   â”‚   â”œâ”€â”€ features/          # MÃ³dulos de funcionalidades",
        "   â”‚   â”œâ”€â”€ app-routing.module.ts",
        "   â”‚   â”œâ”€â”€ app.component.ts",
        "   â”‚   â””â”€â”€ app.module.ts",
        "   â”œâ”€â”€ assets/               # ImÃ¡genes y recursos estÃ¡ticos",
        "   â”œâ”€â”€ environments/         # Configuraciones especÃ­ficas de entorno",
        "   â”œâ”€â”€ index.html            # Archivo principal HTML",
        "   â””â”€â”€ styles.scss           # Estilos globales",
        "   ```",
        "2. Componente bÃ¡sico:",
        "   ```typescript\n   import { Component } from '@angular/core';\n\n   @Component({\n     selector: 'app-root',\n     templateUrl: './app.component.html',\n     styleUrls: ['./app.component.scss']\n   })\n   export class AppComponent {}\n   ```",
        "3. Servicio bÃ¡sico:",
        "   ```typescript\n   import { Injectable } from '@angular/core';\n\n   @Injectable({\n     providedIn: 'root'\n   })\n   export class DataService {\n     constructor() {}\n   }\n   ```"
      ],
      "Comandos Ãºtiles": [
        "`ng serve` - Inicia el servidor de desarrollo.",
        "`ng build` - Crea una versiÃ³n optimizada de tu aplicaciÃ³n para producciÃ³n.",
        "`ng generate component <nombre>` - Crea un nuevo componente.",
        "`ng generate service <nombre>` - Crea un nuevo servicio.",
        "`ng generate module <nombre>` - Crea un nuevo mÃ³dulo.",
        "`ng test` - Ejecuta los tests unitarios.",
        "`ng lint` - Ejecuta el linter para revisar el cÃ³digo.",
        "`ng e2e` - Ejecuta pruebas end-to-end."
      ],
      "Tips & extras": [
        "âœ… Usar ChangeDetectionStrategy.OnPush: Mejora el rendimiento usando OnPush para optimizar la detecciÃ³n de cambios.",
        "   ```typescript\n   @Component({\n     selector: 'app-my-component',\n     changeDetection: ChangeDetectionStrategy.OnPush\n   })\n   export class MyComponent {}\n   ```",
        "âœ… Lazy Loading: Divide tu aplicaciÃ³n en mÃ³dulos que se cargan solo cuando se necesitan, lo que mejora el tiempo de carga inicial.",
        "   ```typescript\n   const routes: Routes = [\n     {\n       path: 'feature',\n       loadChildren: () => import('./feature/feature.module').then(m => m.FeatureModule)\n     }\n   ];\n   ```",
        "âœ… Uso de servicios en el root: Los servicios definidos con `providedIn: 'root'` se instancian solo una vez y se comparten en toda la aplicaciÃ³n.",
        "âœ… Usar RxJS eficientemente: AsegÃºrate de desuscribirte de Observables usando `takeUntil` para evitar pÃ©rdidas de memoria.",
        "   ```typescript\n   import { Subject } from 'rxjs';\n   import { takeUntil } from 'rxjs/operators';\n\n   ngOnInit() {\n     this.service.getData().pipe(\n       takeUntil(this.destroy$)\n     ).subscribe(data => { /* ... */ });\n   }\n   ngOnDestroy() {\n     this.destroy$.next();\n     this.destroy$.complete();\n   }\n   ```"
      ]
  }