{
      "Inicializar proyecto": [
        "ðŸŸ¢ Crear y configurar un proyecto Python:",
        "1. Crear el directorio del proyecto y configurar un entorno virtual:",
        "```bash\n# Crear directorio del proyecto\nmkdir my_project\ncd my_project\n\n# Crear entorno virtual\npython -m venv venv\n\n# Activar entorno virtual\n# En Windows:\nvenv\\Scripts\\activate\n# En macOS/Linux:\nsource venv/bin/activate\n```",
        "2. Estructura inicial del proyecto:",
        "```bash\n# Crear estructura de directorios\nmkdir -p src/my_project tests docs\n\n# Crear archivos iniciales\ntouch README.md\ntouch requirements.txt\ntouch src/my_project/__init__.py\ntouch src/my_project/main.py\n```",
        "3. Opcional: Usar Poetry para la gestiÃ³n de dependencias:",
        "```bash\n# Instalar Poetry\npip install poetry\n\n# Inicializar proyecto con Poetry\npoetry new my_project\ncd my_project\n\n# Agregar dependencias\npoetry add requests pandas\n```"
      ],
      "Instalar librerÃ­as": [
        "ðŸŸ¢ Instalar librerÃ­as bÃ¡sicas en Python:",
        "1. Herramientas de desarrollo:",
        "```bash\npip install black      # Formateador de cÃ³digo\npip install flake8     # Linter\npip install pytest     # Testing\npip install mypy       # ComprobaciÃ³n de tipos estÃ¡ticos\npip install pre-commit # Hooks de pre-commit\npip install tox        # AutomatizaciÃ³n de pruebas\n```",
        "2. Frameworks y clientes HTTP:",
        "```bash\npip install flask django fastapi     # Frameworks web\npip install requests                 # Cliente HTTP\npip install httpx                    # Cliente HTTP asÃ­ncrono\n```",
        "3. Ciencia de datos y machine learning:",
        "```bash\npip install numpy pandas matplotlib seaborn\npip install scikit-learn scipy statsmodels\npip install jupyter jupyterlab\n```",
        "4. Bases de datos y DevOps:",
        "```bash\npip install sqlalchemy             # ORM SQL\npip install psycopg2 pymysql       # Conectores SQL\npip install pymongo                # MongoDB\npip install redis                  # Redis\n```"
      ],
      "Estructura bÃ¡sica": [
        "- Estructura recomendada para un proyecto Python:",
        "```bash\nmy_project/\nâ”œâ”€â”€ .github/                # ConfiguraciÃ³n de GitHub Actions\nâ”œâ”€â”€ docs/                   # DocumentaciÃ³n\nâ”œâ”€â”€ src/\nâ”‚   â””â”€â”€ my_package/         # CÃ³digo fuente principal\nâ”‚       â”œâ”€â”€ __init__.py     # Hace que my_package sea un mÃ³dulo\nâ”‚       â”œâ”€â”€ main.py         # Punto de entrada\nâ”‚       â”œâ”€â”€ models.py       # Definiciones de datos\nâ”‚       â”œâ”€â”€ utils.py        # Utilidades\nâ”‚       â””â”€â”€ submodule/      # SubmÃ³dulo\nâ”‚           â””â”€â”€ __init__.py\nâ”œâ”€â”€ tests/                  # Pruebas\nâ”‚   â”œâ”€â”€ __init__.py\nâ”‚   â”œâ”€â”€ conftest.py         # ConfiguraciÃ³n de pytest\nâ”‚   â””â”€â”€ test_main.py\nâ”œâ”€â”€ .gitignore\nâ”œâ”€â”€ pyproject.toml          # ConfiguraciÃ³n moderna (PEP 518)\nâ”œâ”€â”€ README.md\nâ”œâ”€â”€ setup.py                # Si se usa setuptools\nâ””â”€â”€ requirements.txt\n```"
      ],
      "Comandos Ãºtiles": [
        "`python -m venv venv` - Crear entorno virtual.",
        "`source venv/bin/activate` - Activar entorno virtual (Linux/macOS).",
        "`venv\\Scripts\\activate` - Activar entorno virtual (Windows).",
        "`pip install -r requirements.txt` - Instalar dependencias desde requirements.txt.",
        "`pytest` - Ejecutar las pruebas con pytest.",
        "`black src/` - Formatear el cÃ³digo con black.",
        "`flake8 src/` - Verificar el estilo del cÃ³digo.",
        "`mypy src/` - Verificar los tipos estÃ¡ticos del cÃ³digo.",
        "`tox` - Ejecutar pruebas en mÃºltiples entornos."
      ],
      "Tips & extras": [
        "âœ… Uso de Type Hints: Anota los tipos de datos para mejorar la legibilidad y habilitar la verificaciÃ³n estÃ¡tica del cÃ³digo.",
        "âœ… Uso de Docstrings: Documenta las funciones con formato adecuado (Google, NumPy o reStructuredText) para mejorar la comprensiÃ³n.",
        "âœ… Gestores de contexto: Usa `with` para la gestiÃ³n eficiente de recursos, como archivos o conexiones a bases de datos.",
        "âœ… ConfiguraciÃ³n separada: Usa archivos de configuraciÃ³n para manejar variables y ajustes del proyecto de manera centralizada.",
        "âœ… Uso de entornos virtuales y Poetry: Usa entornos virtuales para gestionar dependencias especÃ­ficas del proyecto y Poetry para facilitar la gestiÃ³n de estas dependencias."
      ]
}