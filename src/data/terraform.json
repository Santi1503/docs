{
      "Inicializar proyecto": [
        "üü¢ Instalar Terraform en tu proyecto:",
        "1. Descarga Terraform desde su [p√°gina oficial](https://www.terraform.io/downloads.html) y sigue las instrucciones para tu sistema operativo.",
        "2. Verifica la instalaci√≥n con el comando:",
        "```bash\nterraform --version\n```",
        "3. Inicializa tu proyecto Terraform en la carpeta donde deseas crear tu configuraci√≥n de infraestructura:",
        "```bash\nterraform init\n```",
        "   Esto descargar√° los complementos necesarios y preparar√° tu entorno para usar Terraform."
      ],
      "Instalar librer√≠as": [
        "‚úÖ No es necesario instalar librer√≠as adicionales para usar Terraform en la mayor√≠a de los casos.",
        "1. Puedes usar proveedores adicionales si trabajas con servicios espec√≠ficos, como AWS, Google Cloud, Azure, etc. Ejemplo:",
        "```hcl\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n```",
        "2. Si usas proveedores adicionales, inst√°lalos autom√°ticamente con el comando `terraform init`."
      ],
      "Estructura b√°sica": [
        "1. Archivo de configuraci√≥n: Terraform usa archivos con extensi√≥n `.tf` para definir la infraestructura. Un archivo t√≠pico se ve as√≠:",
        "```hcl\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"my-unique-bucket-name\"\n}\n```",
        "2. Inicializaci√≥n de proyecto: Aseg√∫rate de ejecutar `terraform init` en la ra√≠z de tu proyecto para inicializar y preparar los archivos de configuraci√≥n.",
        "3. Planificaci√≥n de cambios: Despu√©s de modificar la infraestructura, usa `terraform plan` para ver los cambios que se realizar√°n:",
        "```bash\nterraform plan\n```",
        "   Esto te mostrar√° qu√© recursos se agregar√°n, eliminar√°n o modificar√°n.",
        "4. Aplicar cambios: Usa `terraform apply` para aplicar los cambios definidos en tu configuraci√≥n:",
        "```bash\nterraform apply\n```",
        "   Confirmar√°s la ejecuci√≥n antes de que se realicen cambios."
      ],
      "Comandos √∫tiles": [
        "`terraform init` - Inicializa el directorio de trabajo y descarga los complementos necesarios.",
        "`terraform plan` - Muestra un plan detallado de los cambios que se aplicar√°n a la infraestructura.",
        "`terraform apply` - Aplica los cambios a la infraestructura definidos en el archivo `.tf`.",
        "`terraform destroy` - Destruye los recursos gestionados por Terraform.",
        "`terraform validate` - Valida la sintaxis de los archivos de configuraci√≥n de Terraform.",
        "`terraform output` - Muestra los valores de salida definidos en la configuraci√≥n de Terraform.",
        "`terraform state list` - Muestra los recursos actuales en el estado de Terraform."
      ],
      "Tips & extras": [
        "‚úÖ Usar m√≥dulos: Para organizar y reutilizar configuraciones de infraestructura, utiliza m√≥dulos en Terraform.",
        "   - Ejemplo:",
        "```hcl\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n  name   = \"my-vpc\"\n  cidr   = \"10.0.0.0/16\"\n}\n```",
        "‚úÖ Variables: Usa variables para hacer tu configuraci√≥n m√°s flexible y reutilizable.",
        "   - Ejemplo de variable:",
        "```hcl\nvariable \"region\" {\n  type    = string\n  default = \"us-west-2\"\n}\n\nprovider \"aws\" {\n  region = var.region\n}\n```",
        "‚úÖ Automatizaci√≥n con scripts: Puedes crear scripts de shell o bash para automatizar los procesos de Terraform como inicializaci√≥n, aplicaci√≥n y destrucci√≥n de infraestructura.",
        "‚úÖ Revisi√≥n de cambios: Antes de aplicar cambios, aseg√∫rate de revisar siempre los cambios propuestos con `terraform plan`.",
        "‚úÖ Revisar estado de los recursos: Usa `terraform state show` para ver el estado actual de los recursos gestionados por Terraform."
      ]
  }