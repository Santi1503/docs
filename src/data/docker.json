{
      "Inicializar proyecto": [
        "üü¢ Instalar Docker de forma local:",
        "1. Para Linux (Ubuntu/Debian):",
        "```bash\nsudo apt update\nsudo apt install apt-transport-https ca-certificates curl software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\nsudo apt update\nsudo apt install docker-ce\n```",
        "2. Para macOS:",
        "- Descarga Docker Desktop desde https://www.docker.com/products/docker-desktop y sigue las instrucciones.",
        "3. Para Windows:",
        "- Descarga Docker Desktop desde https://www.docker.com/products/docker-desktop y sigue las instrucciones.",
        "4. Verifica la instalaci√≥n con el siguiente comando:",
        "```bash\ndocker --version\n```"
      ],
      "Instalar librer√≠as": [
        "‚ùå Docker no requiere librer√≠as externas, pero puedes instalar im√°genes y contenedores para diversas aplicaciones.",
        "1. Para instalar una imagen, usa el comando:",
        "```bash\ndocker pull nombre_imagen\n```",
        "2. Para crear un contenedor a partir de una imagen:",
        "```bash\ndocker run -d -p 8080:80 nombre_imagen\n```"
      ],
      "Estructura b√°sica": [
        "- Dockerfile: Archivo que define el entorno y la configuraci√≥n de una imagen Docker.",
        "  Ejemplo b√°sico de Dockerfile:",
        "  ```dockerfile\nFROM node:14\nWORKDIR /app\nCOPY . .\nRUN npm install\nCMD [\"npm\", \"start\"]\nEXPOSE 3000\n```",
        "- docker-compose.yml: Archivo para definir y ejecutar aplicaciones multi-contenedor.",
        "  Ejemplo b√°sico de docker-compose.yml:",
        "  ```yaml\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n  db:\n    image: mongo\n    ports:\n      - \"27017:27017\"\n```",
        "- Contenedor: Instancia de una imagen que se est√° ejecutando.",
        "- Imagen: Plantilla inmutable de la cual se crean contenedores.",
        "- Vol√∫menes: Usados para persistir datos entre contenedores."
      ],
      "Comandos √∫tiles": [
        "`docker build -t nombre_imagen .` - Construye una imagen a partir de un Dockerfile.",
        "`docker run -d -p 8080:80 nombre_imagen` - Ejecuta un contenedor basado en una imagen.",
        "`docker ps` - Muestra los contenedores en ejecuci√≥n.",
        "`docker stop <container_id>` - Detiene un contenedor.",
        "`docker-compose up` - Levanta los contenedores definidos en un archivo docker-compose.yml.",
        "`docker-compose down` - Detiene y elimina los contenedores y redes de un archivo docker-compose.yml."
      ],
      "Tips & extras": [
        "‚úÖ Usa docker-compose para manejar aplicaciones con m√∫ltiples contenedores (por ejemplo, un contenedor para la base de datos y otro para el backend).",
        "‚úÖ Usa vol√∫menes para persistir datos entre ejecuciones de contenedores.",
        "‚úÖ Utiliza Dockerfile multietapa para optimizar la construcci√≥n de im√°genes, eliminando dependencias innecesarias al final del proceso.",
        "‚úÖ Considera usar Docker para desarrollo local con bases de datos, servidores web, etc., para emular el entorno de producci√≥n.",
        "‚úÖ Usa Docker Desktop para una experiencia m√°s f√°cil de usar en macOS y Windows, que incluye la interfaz gr√°fica para manejar contenedores.",
        "‚úÖ Aprovecha las im√°genes oficiales de Docker Hub para servicios populares como Node.js, Nginx, MongoDB, entre otros.",
        "‚úÖ Utiliza Docker Swarm o Kubernetes para orquestar contenedores a gran escala."
      ]
}